{"file_contents":{"README.md":{"content":"# Employee Attendance System\n\nA comprehensive web application for employee attendance management with geolocation verification and photo capture.\n\n## Features\n\n### Employee Features\n- **Secure Login**: Role-based authentication system\n- **Geolocation Verification**: Ensures employees are at office location before clocking in\n- **Selfie Capture**: Photo verification for attendance\n- **Clock In/Out**: Easy time tracking with automatic hours calculation\n- **Attendance History**: View personal attendance records\n- **Profile Management**: Update personal information\n\n### Admin Features\n- **Dashboard Overview**: Real-time attendance statistics\n- **Employee Management**: Add, edit, and manage employee accounts\n- **Attendance Records**: View all employee attendance data\n- **Location Settings**: Configure office location and radius\n- **Data Export**: Download attendance reports\n- **Profile Management**: Admin account settings\n\n## Technology Stack\n\n- **Frontend**: React.js with React Router\n- **Styling**: Tailwind CSS\n- **Authentication**: Firebase Authentication\n- **Database**: Firebase Firestore\n- **Storage**: Firebase Storage (for selfie photos)\n- **Geolocation**: Browser Geolocation API\n- **Camera**: MediaDevices API\n\n## Setup Instructions\n\n### 1. Firebase Configuration\n1. Create a Firebase project at https://console.firebase.google.com/\n2. Enable Authentication with Email/Password\n3. Enable Firestore Database\n4. Enable Storage\n5. Configure Firestore Security Rules (copy from firestore.rules file)\n6. Configure Storage Security Rules (copy from storage.rules file)\n7. Get your Firebase configuration keys\n\n### 2. Environment Variables\nThe following environment variables are required:\n- `VITE_FIREBASE_API_KEY`\n- `VITE_FIREBASE_APP_ID`\n- `VITE_FIREBASE_PROJECT_ID`\n\n### 3. Create First Admin User\n1. Start the application: `npm run dev`\n2. Navigate to `/admin-setup` in your browser\n3. Fill out the admin registration form with your desired credentials\n4. This page will only work if no admin accounts exist in the system\n\n### 4. Application Setup\n1. Login as admin\n2. Go to Admin Dashboard > Office Location to set your office coordinates\n3. Add employees through Admin Dashboard > Manage Employees\n\n## Usage\n\n### For Employees\n1. Login with provided credentials\n2. Go to Clock In page\n3. Allow location and camera permissions\n4. System will verify you're at office location\n5. Take selfie for verification\n6. Click Clock In to start work day\n7. Use Clock Out page to end work day\n\n### For Admins\n1. Login with admin credentials\n2. Access admin dashboard for overview\n3. Manage employees through employee management section\n4. View and export attendance records\n5. Configure office location settings\n\n## Database Schema\n\n### Users Collection\n- `uid`: User ID (document ID)\n- `email`: User email\n- `name`: Full name\n- `role`: 'admin' or 'employee'\n- `employeeId`: Employee identifier\n- `isActive`: Account status\n- `createdAt`: Account creation date\n\n### Attendance Collection\n- `employeeId`: Reference to user\n- `employeeName`: Employee name\n- `date`: Attendance date (YYYY-MM-DD)\n- `clockIn`: Clock in time\n- `clockOut`: Clock out time\n- `clockInTimestamp`: Full timestamp\n- `clockOutTimestamp`: Full timestamp\n- `location`: GPS coordinates\n- `selfieURL`: Photo URL in Firebase Storage\n- `hoursWorked`: Calculated hours\n\n### Office Settings Collection\n- `latitude`: Office latitude\n- `longitude`: Office longitude\n- `radius`: Allowed radius in meters\n\n## Security Features\n\n- Role-based access control\n- Geolocation verification\n- Photo verification\n- Secure Firebase authentication\n- Protected routes\n\n## Browser Requirements\n\n- Modern browser with geolocation support\n- Camera access for selfie capture\n- JavaScript enabled\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Build for production\nnpm run build\n```\n\n## Production Deployment Notes\n\n### Security Considerations\n1. **Firestore Security Rules**: Deploy the provided firestore.rules to ensure data access control\n2. **Storage Security Rules**: Deploy the provided storage.rules to secure photo uploads\n3. **Employee Creation**: Client-side employee creation is disabled for security. Use Cloud Functions or manual invitation flows\n4. **Admin Bootstrap**: The system uses a secure bootstrap mechanism that only allows first admin creation when no admins exist\n\n### Known Limitations\n- Employee creation is currently disabled to prevent session switching issues\n- Admin setup page allows first-admin creation (secure for single-tenant deployments)\n- Client-side geolocation can be spoofed (consider server-side validation)\n\n### Recommended Enhancements\n- Implement Cloud Functions for user management\n- Add attendance report generation and export\n- Implement push notifications for attendance reminders\n- Add multi-location support for distributed organizations\n\n## Support\n\nFor technical support or questions about the attendance system, contact your system administrator.","size_bytes":5007},"tailwind.config.js":{"content":"\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    // Removed @tailwindcss/forms for v4 compatibility\n    // Form styles will be handled with standard Tailwind utilities\n  ],\n}\n","size_bytes":309},"vite.config.js":{"content":"import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    allowedHosts: [\n      'b49e27ac-6007-4b9b-adf6-83f2f119425f-00-2mf6dm6gqhckg.kirk.replit.dev',\n      '.replit.dev'\n    ],\n    hmr: {\n      port: 5000,\n      host: '0.0.0.0',\n      clientPort: 5000,\n      protocol: 'ws'\n    },\n    watch: {\n      usePolling: true\n    }\n  }\n})\n","size_bytes":512},"src/App.css":{"content":"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.App {\n  text-align: center;\n}\n","size_bytes":92},"src/App.jsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { AuthProvider } from './contexts/AuthContext';\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// Import all pages\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Profile from './pages/Profile';\nimport ClockIn from './pages/ClockIn';\nimport ClockOut from './pages/ClockOut';\nimport AdminSetup from './pages/AdminSetup';\n\n// Admin pages\nimport AddEmployee from './pages/admin/AddEmployee';\nimport ManageEmployees from './pages/admin/ManageEmployees';\nimport OfficeLocation from './pages/admin/OfficeLocation';\nimport AttendanceRecords from './pages/admin/AttendanceRecords';\nimport Reports from './pages/admin/Reports';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"min-h-screen bg-gray-50\">\n          <Routes>\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/admin-setup\" element={<AdminSetup />} />\n\n            <Route path=\"/dashboard\" element={\n              <ProtectedRoute>\n                <Dashboard />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/profile\" element={\n              <ProtectedRoute>\n                <Profile />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/clock-in\" element={\n              <ProtectedRoute requiredRole=\"employee\">\n                <ClockIn />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/clock-out\" element={\n              <ProtectedRoute requiredRole=\"employee\">\n                <ClockOut />\n              </ProtectedRoute>\n            } />\n\n            {/* Admin Routes */}\n            <Route path=\"/admin/add-employee\" element={\n              <ProtectedRoute requiredRole=\"admin\">\n                <AddEmployee />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/admin/manage-employees\" element={\n              <ProtectedRoute requiredRole=\"admin\">\n                <ManageEmployees />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/admin/office-location\" element={\n              <ProtectedRoute requiredRole=\"admin\">\n                <OfficeLocation />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/admin/attendance-records\" element={\n              <ProtectedRoute requiredRole=\"admin\">\n                <AttendanceRecords />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/admin/reports\" element={\n              <ProtectedRoute requiredRole=\"admin\">\n                <Reports />\n              </ProtectedRoute>\n            } />\n\n            <Route path=\"/\" element={<Navigate to=\"/dashboard\" />} />\n          </Routes>\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;","size_bytes":2904},"src/firebase.js":{"content":"\n// Firebase configuration based on firebase_barebones_javascript integration\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD7m1VKeOrxGvHFHJT-Cr0PVZBBHhiGDMw\",\n  authDomain: \"geo-attendance-system-179a4.firebaseapp.com\",\n  projectId: \"geo-attendance-system-179a4\",\n  storageBucket: \"geo-attendance-system-179a4.firebasestorage.app\",\n  messagingSenderId: \"53451957706\",\n  appId: \"1:53451957706:web:885a22cb2f69d852fa1b33\",\n  measurementId: \"G-LMP6D1VW54\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Cloud Firestore and get a reference to the service\nexport const db = getFirestore(app);\n\n// Initialize Firebase Storage and get a reference to the service\nexport const storage = getStorage(app);\n\nexport default app;\n","size_bytes":1045},"src/index.jsx":{"content":"import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n)","size_bytes":204},"src/components/Layout.jsx":{"content":"\nimport React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport default function Layout({ children, title }) {\n  const { currentUser, userRole, logout } = useAuth();\n  const navigate = useNavigate();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      navigate('/login');\n    } catch (error) {\n      console.error('Failed to logout:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <nav className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">\n                {title || 'Attendance System'}\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-700\">\n                {currentUser?.email}\n              </span>\n              {userRole === 'admin' && (\n                <Link \n                  to=\"/admin/manage-employees\"\n                  className=\"text-gray-600 hover:text-gray-900\"\n                >\n                  Admin Panel\n                </Link>\n              )}\n              <Link \n                to=\"/dashboard\"\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                Dashboard\n              </Link>\n              <Link \n                to=\"/profile\"\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                Profile\n              </Link>\n              <button\n                onClick={handleLogout}\n                className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm\"\n              >\n                Logout\n              </button>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":2074},"src/components/ProtectedRoute.jsx":{"content":"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport default function ProtectedRoute({ children, requiredRole }) {\n  const { currentUser, userRole, userProfile } = useAuth();\n\n  if (!currentUser) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  // Wait for user profile to load before checking roles\n  if (!userProfile) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (requiredRole && userRole !== requiredRole) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n\n  return children;\n}","size_bytes":833},"src/contexts/AuthContext.jsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { auth, db } from '../firebase';\nimport { onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport { doc, getDoc } from 'firebase/firestore';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      if (user) {\n        setCurrentUser(user);\n\n        // Fetch user profile from Firestore\n        try {\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            setUserProfile(userData);\n            setUserRole(userData.role);\n          }\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      } else {\n        setCurrentUser(null);\n        setUserProfile(null);\n        setUserRole(null);\n      }\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const login = async (email, password) => {\n    return signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const logout = async () => {\n    return signOut(auth);\n  };\n\n  const value = {\n    currentUser,\n    userProfile,\n    userRole,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":1714},"src/pages/AdminDashboard.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport Layout from '../components/Layout';\n\nexport default function AdminDashboard() {\n  const [stats, setStats] = useState({\n    totalEmployees: 0,\n    presentToday: 0,\n    totalAttendanceRecords: 0\n  });\n\n  useEffect(() => {\n    fetchStats();\n  }, []);\n\n  const fetchStats = async () => {\n    try {\n      // Get total employees\n      const employeesSnapshot = await getDocs(\n        query(collection(db, 'users'), where('role', '==', 'employee'))\n      );\n      \n      // Get today's attendance\n      const today = new Date().toISOString().split('T')[0];\n      const attendanceSnapshot = await getDocs(\n        query(collection(db, 'attendance'), where('date', '==', today))\n      );\n\n      // Get total attendance records\n      const allAttendanceSnapshot = await getDocs(collection(db, 'attendance'));\n\n      setStats({\n        totalEmployees: employeesSnapshot.size,\n        presentToday: attendanceSnapshot.size,\n        totalAttendanceRecords: allAttendanceSnapshot.size\n      });\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n    }\n  };\n\n  return (\n    <Layout title=\"Admin Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Total Employees</h3>\n            <p className=\"text-3xl font-bold text-blue-600\">{stats.totalEmployees}</p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Present Today</h3>\n            <p className=\"text-3xl font-bold text-green-600\">{stats.presentToday}</p>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Total Records</h3>\n            <p className=\"text-3xl font-bold text-purple-600\">{stats.totalAttendanceRecords}</p>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Quick Actions</h2>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Link\n                to=\"/admin/add-employee\"\n                className=\"bg-blue-500 hover:bg-blue-600 text-white p-4 rounded-lg text-center\"\n              >\n                Add Employee\n              </Link>\n              \n              <Link\n                to=\"/admin/manage-employees\"\n                className=\"bg-green-500 hover:bg-green-600 text-white p-4 rounded-lg text-center\"\n              >\n                Manage Employees\n              </Link>\n              \n              <Link\n                to=\"/admin/attendance-records\"\n                className=\"bg-purple-500 hover:bg-purple-600 text-white p-4 rounded-lg text-center\"\n              >\n                View Attendance\n              </Link>\n              \n              <Link\n                to=\"/admin/office-location\"\n                className=\"bg-yellow-500 hover:bg-yellow-600 text-white p-4 rounded-lg text-center\"\n              >\n                Office Settings\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":3649},"src/pages/AdminSetup.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, db } from '../firebase';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc, serverTimestamp, collection, getDocs, query, where } from 'firebase/firestore';\n\nexport default function AdminSetup() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    employeeId: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkExistingAdmin();\n  }, []);\n\n  const checkExistingAdmin = async () => {\n    try {\n      const usersRef = collection(db, 'users');\n      const adminQuery = query(usersRef, where('role', '==', 'admin'));\n      const adminSnapshot = await getDocs(adminQuery);\n\n      if (!adminSnapshot.empty) {\n        navigate('/login');\n      }\n    } catch (error) {\n      console.error('Error checking for existing admin:', error);\n    }\n  };\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Create user account\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        formData.email,\n        formData.password\n      );\n\n      // Create user document in Firestore\n      await setDoc(doc(db, 'users', userCredential.user.uid), {\n        name: formData.name,\n        email: formData.email,\n        role: 'admin',\n        employeeId: formData.employeeId,\n        isActive: true,\n        createdAt: serverTimestamp()\n      });\n\n      navigate('/dashboard');\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Admin Account Setup\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Create the first admin account for the system\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n                Full Name\n              </label>\n              <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                required\n                className=\"mt-1 appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"Enter your full name\"\n                value={formData.name}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"employeeId\" className=\"block text-sm font-medium text-gray-700\">\n                Employee ID\n              </label>\n              <input\n                id=\"employeeId\"\n                name=\"employeeId\"\n                type=\"text\"\n                required\n                className=\"mt-1 appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"Enter employee ID\"\n                value={formData.employeeId}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email Address\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                className=\"mt-1 appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"Enter email address\"\n                value={formData.email}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Password\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                className=\"mt-1 appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"Enter password\"\n                value={formData.password}\n                onChange={handleChange}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                Confirm Password\n              </label>\n              <input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                required\n                className=\"mt-1 appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                placeholder=\"Confirm password\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n            >\n              {loading ? 'Creating Account...' : 'Create Admin Account'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":6859},"src/pages/ClockIn.jsx":{"content":"import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { doc, setDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { db, storage } from '../firebase';\nimport Layout from '../components/Layout';\n\nexport default function ClockIn() {\n  const [loading, setLoading] = useState(false);\n  const [location, setLocation] = useState(null);\n  const [locationError, setLocationError] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const [photoError, setPhotoError] = useState('');\n  const [stream, setStream] = useState(null);\n  const streamRef = useRef(null);\n  const [officeLocation, setOfficeLocation] = useState(null);\n  const [alreadyClockedIn, setAlreadyClockedIn] = useState(false);\n\n  const { currentUser, userProfile } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    getOfficeLocation();\n    if (userProfile?.employeeId) {\n      checkTodaysAttendance();\n    }\n  }, [userProfile]);\n\n  // Separate effect for stream cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  const getOfficeLocation = async () => {\n    try {\n      const settingsRef = collection(db, 'settings');\n      const settingsSnapshot = await getDocs(settingsRef);\n\n      if (!settingsSnapshot.empty) {\n        const settings = settingsSnapshot.docs[0].data();\n        setOfficeLocation({\n          latitude: settings.latitude,\n          longitude: settings.longitude,\n          radius: settings.radius || 100\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching office location:', error);\n    }\n  };\n\n  const checkTodaysAttendance = async () => {\n    if (!currentUser || !userProfile?.employeeId) return;\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const attendanceRef = collection(db, 'attendance');\n      const todayQuery = query(\n        attendanceRef,\n        where('employeeId', '==', userProfile?.employeeId),\n        where('date', '==', today)\n      );\n\n      const snapshot = await getDocs(todayQuery);\n      if (!snapshot.empty) {\n        const attendance = snapshot.docs[0].data();\n        if (attendance.clockIn && !attendance.clockOut) {\n          setAlreadyClockedIn(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking attendance:', error);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    setLocationError('');\n\n    if (!navigator.geolocation) {\n      setLocationError('Geolocation is not supported by this browser');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      },\n      (error) => {\n        setLocationError('Error getting location: ' + error.message);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      }\n    );\n  };\n\n  const startCamera = async () => {\n    setPhotoError('');\n\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({ \n        video: { facingMode: 'user' } \n      });\n      setStream(mediaStream);\n      streamRef.current = mediaStream;\n\n      const video = document.getElementById('video');\n      if (video) {\n        video.srcObject = mediaStream;\n      }\n    } catch (error) {\n      setPhotoError('Error accessing camera: ' + error.message);\n    }\n  };\n\n  const capturePhoto = () => {\n    const video = document.getElementById('video');\n    const canvas = document.getElementById('hidden-canvas');\n\n    if (video && canvas) {\n      const context = canvas.getContext('2d');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      context.drawImage(video, 0, 0);\n\n      canvas.toBlob((blob) => {\n        setPhoto(blob);\n        if (streamRef.current) {\n          streamRef.current.getTracks().forEach(track => track.stop());\n          streamRef.current = null;\n          setStream(null);\n        }\n      }, 'image/jpeg', 0.8);\n    }\n  };\n\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = lat1 * Math.PI/180;\n    const φ2 = lat2 * Math.PI/180;\n    const Δφ = (lat2-lat1) * Math.PI/180;\n    const Δλ = (lon2-lon1) * Math.PI/180;\n\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n              Math.cos(φ1) * Math.cos(φ2) *\n              Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    return R * c;\n  };\n\n  const handleClockIn = async () => {\n    if (!userProfile?.employeeId) {\n      alert('User profile not loaded. Please wait and try again.');\n      return;\n    }\n\n    if (!location) {\n      setLocationError('Please get your location first');\n      return;\n    }\n\n    if (!photo) {\n      setPhotoError('Please take a selfie first');\n      return;\n    }\n\n    if (!officeLocation) {\n      alert('Office location not configured. Please contact admin.');\n      return;\n    }\n\n    // Check if user is within office radius\n    const distance = calculateDistance(\n      location.latitude,\n      location.longitude,\n      officeLocation.latitude,\n      officeLocation.longitude\n    );\n\n    if (distance > officeLocation.radius) {\n      alert(`You are ${Math.round(distance)}m away from office. You must be within ${officeLocation.radius}m to clock in.`);\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      // Upload photo to Firebase Storage\n      const photoRef = ref(storage, `attendance-photos/${currentUser.uid}/${Date.now()}.jpg`);\n      await uploadBytes(photoRef, photo);\n      const photoURL = await getDownloadURL(photoRef);\n\n      // Create attendance record\n      const now = new Date();\n      const today = now.toISOString().split('T')[0];\n\n      const attendanceData = {\n        employeeId: userProfile.employeeId,\n        employeeName: userProfile.name,\n        date: today,\n        clockIn: now.toLocaleTimeString(),\n        clockInTimestamp: now,\n        location: location,\n        selfieURL: photoURL,\n        hoursWorked: null\n      };\n\n      await setDoc(doc(db, 'attendance', `${userProfile.employeeId}_${today}`), attendanceData);\n\n      alert('Successfully clocked in!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error clocking in:', error);\n      alert('Error clocking in: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (alreadyClockedIn) {\n    return (\n      <Layout>\n        <div className=\"max-w-md mx-auto mt-8 p-6 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <h2 className=\"text-xl font-bold text-yellow-800 mb-4\">Already Clocked In</h2>\n          <p className=\"text-yellow-700\">You have already clocked in for today. Use the Clock Out page to end your work day.</p>\n          <button\n            onClick={() => navigate('/clock-out')}\n            className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md\"\n          >\n            Go to Clock Out\n          </button>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-md mx-auto mt-8 p-6 bg-white shadow-lg rounded-lg\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Clock In</h2>\n\n        {/* Location Section */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-2\">1. Verify Location</h3>\n          {!location ? (\n            <button\n              onClick={getCurrentLocation}\n              className=\"w-full bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md\"\n            >\n              Get Current Location\n            </button>\n          ) : (\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n              <p className=\"text-green-800\">✓ Location verified</p>\n              <p className=\"text-sm text-green-600\">\n                Lat: {location.latitude.toFixed(6)}, Lng: {location.longitude.toFixed(6)}\n              </p>\n            </div>\n          )}\n          {locationError && (\n            <p className=\"text-red-600 text-sm mt-2\">{locationError}</p>\n          )}\n        </div>\n\n        {/* Camera Section */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-2\">2. Take Selfie</h3>\n          {!stream && !photo && (\n            <button\n              onClick={startCamera}\n              className=\"w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md\"\n            >\n              Start Camera\n            </button>\n          )}\n\n          {stream && (\n            <div className=\"text-center\">\n              <video\n                id=\"video\"\n                autoPlay\n                playsInline\n                className=\"w-full max-w-xs mx-auto rounded-md\"\n              />\n              <button\n                onClick={capturePhoto}\n                className=\"mt-2 bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-md\"\n              >\n                Capture Photo\n              </button>\n            </div>\n          )}\n\n          {photo && (\n            <div className=\"text-center\">\n              <canvas id=\"canvas\" className=\"w-full max-w-xs mx-auto rounded-md\" />\n              <p className=\"text-green-600 mt-2\">✓ Photo captured</p>\n              <button\n                onClick={() => {\n                  setPhoto(null);\n                  startCamera();\n                }}\n                className=\"mt-2 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm\"\n              >\n                Retake Photo\n              </button>\n            </div>\n          )}\n\n          {photoError && (\n            <p className=\"text-red-600 text-sm mt-2\">{photoError}</p>\n          )}\n        </div>\n\n        {/* Clock In Button */}\n        <button\n          onClick={handleClockIn}\n          disabled={loading || !location || !photo}\n          className=\"w-full bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 text-white px-4 py-3 rounded-md font-semibold\"\n        >\n          {loading ? 'Clocking In...' : 'Clock In'}\n        </button>\n\n        <canvas id=\"hidden-canvas\" style={{ display: 'none' }} />\n      </div>\n    </Layout>\n  );\n}","size_bytes":10446},"src/pages/ClockOut.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { doc, updateDoc, collection, query, where, getDocs } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport Layout from '../components/Layout';\n\nexport default function ClockOut() {\n  const [loading, setLoading] = useState(false);\n  const [todayAttendance, setTodayAttendance] = useState(null);\n  const [alreadyClockedOut, setAlreadyClockedOut] = useState(false);\n\n  const { currentUser, userProfile } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (userProfile?.employeeId) {\n      checkTodaysAttendance();\n    }\n  }, [userProfile]);\n\n  const checkTodaysAttendance = async () => {\n    if (!currentUser || !userProfile?.employeeId) return;\n\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const attendanceRef = collection(db, 'attendance');\n      const todayQuery = query(\n        attendanceRef,\n        where('employeeId', '==', userProfile?.employeeId),\n        where('date', '==', today)\n      );\n\n      const snapshot = await getDocs(todayQuery);\n      if (!snapshot.empty) {\n        const attendance = snapshot.docs[0].data();\n        setTodayAttendance({ id: snapshot.docs[0].id, ...attendance });\n        \n        if (attendance.clockOut) {\n          setAlreadyClockedOut(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error checking attendance:', error);\n    }\n  };\n\n  const calculateHours = (clockInTimestamp, clockOutTimestamp) => {\n    // Use Firebase Timestamp objects for reliable calculation\n    const clockInMs = clockInTimestamp?.toMillis ? clockInTimestamp.toMillis() : clockInTimestamp.getTime();\n    const clockOutMs = clockOutTimestamp?.toMillis ? clockOutTimestamp.toMillis() : clockOutTimestamp.getTime();\n    const diffMs = clockOutMs - clockInMs;\n    const diffHours = diffMs / (1000 * 60 * 60);\n    return Math.max(0, diffHours).toFixed(2);\n  };\n\n  const handleClockOut = async () => {\n    if (!todayAttendance) {\n      alert('No clock-in record found for today. Please clock in first.');\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const now = new Date();\n      const clockOutTime = now.toLocaleTimeString();\n      const hoursWorked = calculateHours(todayAttendance.clockInTimestamp, now);\n\n      await updateDoc(doc(db, 'attendance', todayAttendance.id), {\n        clockOut: clockOutTime,\n        clockOutTimestamp: now,\n        hoursWorked: hoursWorked\n      });\n\n      alert('Successfully clocked out!');\n      navigate('/dashboard');\n    } catch (error) {\n      console.error('Error clocking out:', error);\n      alert('Error clocking out: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (alreadyClockedOut) {\n    return (\n      <Layout>\n        <div className=\"max-w-md mx-auto mt-8 p-6 bg-blue-50 border border-blue-200 rounded-lg\">\n          <h2 className=\"text-xl font-bold text-blue-800 mb-4\">Already Clocked Out</h2>\n          <p className=\"text-blue-700\">You have already clocked out for today.</p>\n          <div className=\"mt-4 space-y-2\">\n            <p className=\"text-sm text-blue-600\">\n              Clock In: {todayAttendance?.clockIn}\n            </p>\n            <p className=\"text-sm text-blue-600\">\n              Clock Out: {todayAttendance?.clockOut}\n            </p>\n            <p className=\"text-sm text-blue-600\">\n              Hours Worked: {todayAttendance?.hoursWorked}\n            </p>\n          </div>\n          <button\n            onClick={() => navigate('/dashboard')}\n            className=\"mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md\"\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!todayAttendance) {\n    return (\n      <Layout>\n        <div className=\"max-w-md mx-auto mt-8 p-6 bg-yellow-50 border border-yellow-200 rounded-lg\">\n          <h2 className=\"text-xl font-bold text-yellow-800 mb-4\">No Clock-In Record</h2>\n          <p className=\"text-yellow-700\">You haven't clocked in today. Please clock in first.</p>\n          <button\n            onClick={() => navigate('/clock-in')}\n            className=\"mt-4 bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md\"\n          >\n            Go to Clock In\n          </button>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"max-w-md mx-auto mt-8 p-6 bg-white shadow-lg rounded-lg\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Clock Out</h2>\n\n        <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg\">\n          <h3 className=\"text-lg font-semibold text-green-800 mb-2\">Today's Session</h3>\n          <p className=\"text-green-700\">\n            Clock In: {todayAttendance.clockIn}\n          </p>\n          <p className=\"text-green-700\">\n            Current Time: {new Date().toLocaleTimeString()}\n          </p>\n        </div>\n\n        <button\n          onClick={handleClockOut}\n          disabled={loading}\n          className=\"w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-400 text-white px-4 py-3 rounded-md font-semibold\"\n        >\n          {loading ? 'Clocking Out...' : 'Clock Out'}\n        </button>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":5331},"src/pages/Dashboard.jsx":{"content":"\nimport React from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport AdminDashboard from './AdminDashboard';\nimport EmployeeDashboard from './EmployeeDashboard';\n\nexport default function Dashboard() {\n  const { userRole, userProfile, currentUser } = useAuth();\n\n  // Show loading state while user and profile are being determined\n  if (!currentUser || !userProfile) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-500\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (userRole === 'admin') {\n    return <AdminDashboard />;\n  } else if (userRole === 'employee') {\n    return <EmployeeDashboard />;\n  } else {\n    // Handle unknown role\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Access Denied</h2>\n          <p className=\"mt-2 text-gray-600\">Your account role is not recognized. Please contact an administrator.</p>\n        </div>\n      </div>\n    );\n  }\n}\n","size_bytes":1250},"src/pages/EmployeeDashboard.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { collection, query, where, getDocs, orderBy, limit } from 'firebase/firestore';\nimport { db } from '../firebase';\nimport { useAuth } from '../contexts/AuthContext';\nimport Layout from '../components/Layout';\n\nexport default function EmployeeDashboard() {\n  const { userProfile } = useAuth();\n  const [todayAttendance, setTodayAttendance] = useState(null);\n  const [recentAttendance, setRecentAttendance] = useState([]);\n\n  useEffect(() => {\n    if (userProfile?.employeeId) {\n      fetchTodayAttendance();\n      fetchRecentAttendance();\n    }\n  }, [userProfile]);\n\n  const fetchTodayAttendance = async () => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const attendanceQuery = query(\n        collection(db, 'attendance'),\n        where('employeeId', '==', userProfile.employeeId),\n        where('date', '==', today)\n      );\n\n      const snapshot = await getDocs(attendanceQuery);\n      if (!snapshot.empty) {\n        setTodayAttendance(snapshot.docs[0].data());\n      }\n    } catch (error) {\n      console.error('Error fetching today attendance:', error);\n    }\n  };\n\n  const fetchRecentAttendance = async () => {\n    try {\n      const attendanceQuery = query(\n        collection(db, 'attendance'),\n        where('employeeId', '==', userProfile.employeeId),\n        orderBy('date', 'desc'),\n        limit(5)\n      );\n\n      const snapshot = await getDocs(attendanceQuery);\n      const attendance = snapshot.docs.map(doc => doc.data());\n      setRecentAttendance(attendance);\n    } catch (error) {\n      console.error('Error fetching recent attendance:', error);\n    }\n  };\n\n  return (\n    <Layout title=\"Employee Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Welcome Section */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n            Welcome, {userProfile?.name}!\n          </h2>\n          <p className=\"text-gray-600\">Employee ID: {userProfile?.employeeId}</p>\n        </div>\n\n        {/* Today's Status */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Today's Status</h3>\n          {todayAttendance ? (\n            <div className=\"space-y-2\">\n              <p className=\"text-green-600\">\n                ✓ Clock In: {todayAttendance.clockIn}\n              </p>\n              {todayAttendance.clockOut ? (\n                <p className=\"text-blue-600\">\n                  ✓ Clock Out: {todayAttendance.clockOut}\n                </p>\n              ) : (\n                <p className=\"text-orange-600\">\n                  ⚠ Not clocked out yet\n                </p>\n              )}\n              {todayAttendance.hoursWorked && (\n                <p className=\"text-gray-600\">\n                  Hours Worked: {todayAttendance.hoursWorked}\n                </p>\n              )}\n            </div>\n          ) : (\n            <p className=\"text-red-600\">No attendance record for today</p>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Link\n            to=\"/clock-in\"\n            className=\"bg-green-500 hover:bg-green-600 text-white p-6 rounded-lg text-center\"\n          >\n            <h3 className=\"text-xl font-semibold mb-2\">Clock In</h3>\n            <p>Start your work day</p>\n          </Link>\n          \n          <Link\n            to=\"/clock-out\"\n            className=\"bg-red-500 hover:bg-red-600 text-white p-6 rounded-lg text-center\"\n          >\n            <h3 className=\"text-xl font-semibold mb-2\">Clock Out</h3>\n            <p>End your work day</p>\n          </Link>\n        </div>\n\n        {/* Recent Attendance */}\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Recent Attendance</h3>\n          </div>\n          <div className=\"p-6\">\n            {recentAttendance.length > 0 ? (\n              <div className=\"space-y-3\">\n                {recentAttendance.map((record, index) => (\n                  <div key={index} className=\"flex justify-between items-center border-b pb-2\">\n                    <span className=\"font-medium\">{record.date}</span>\n                    <div className=\"text-sm text-gray-600\">\n                      In: {record.clockIn} | Out: {record.clockOut || 'N/A'}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-gray-500\">No attendance records found</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":4789},"src/pages/Login.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { login } = useAuth();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      await login(email, password);\n      navigate('/dashboard');\n    } catch (error) {\n      setError('Failed to sign in: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Sign in to your account\n          </h2>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n          <div>\n            <label htmlFor=\"email\" className=\"sr-only\">\n              Email address\n            </label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              placeholder=\"Email address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"sr-only\">\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              required\n              className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n          </div>\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n            >\n              {loading ? 'Signing in...' : 'Sign in'}\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <Link \n              to=\"/admin-setup\" \n              className=\"text-indigo-600 hover:text-indigo-500\"\n            >\n              Set up admin account\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":3371},"src/pages/Profile.jsx":{"content":"\nimport React from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Layout from '../components/Layout';\n\nexport default function Profile() {\n  const { currentUser, userProfile } = useAuth();\n\n  return (\n    <Layout title=\"Profile\">\n      <div className=\"max-w-2xl mx-auto bg-white rounded-lg shadow p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">User Profile</h1>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Full Name</label>\n            <p className=\"mt-1 text-gray-900\">{userProfile?.name || 'N/A'}</p>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Email</label>\n            <p className=\"mt-1 text-gray-900\">{currentUser?.email || 'N/A'}</p>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Employee ID</label>\n            <p className=\"mt-1 text-gray-900\">{userProfile?.employeeId || 'N/A'}</p>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Role</label>\n            <p className=\"mt-1 text-gray-900 capitalize\">{userProfile?.role || 'N/A'}</p>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">Account Status</label>\n            <p className=\"mt-1\">\n              <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                userProfile?.isActive \n                  ? 'bg-green-100 text-green-800' \n                  : 'bg-red-100 text-red-800'\n              }`}>\n                {userProfile?.isActive ? 'Active' : 'Inactive'}\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":1866},"src/utils/initAdmin.js":{"content":"// Admin Initialization Script\n// This file helps create the first admin user in the system\n\nimport { auth, db } from '../firebase';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc } from 'firebase/firestore';\n\nexport const createFirstAdmin = async (email, password, name) => {\n  try {\n    // Create admin user with Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    \n    // Create admin document in Firestore\n    await setDoc(doc(db, 'users', userCredential.user.uid), {\n      email: email,\n      role: 'admin',\n      name: name,\n      employeeId: 'ADMIN001',\n      createdAt: new Date().toISOString(),\n      isActive: true\n    });\n    \n    console.log('Admin user created successfully!');\n    return userCredential.user;\n  } catch (error) {\n    console.error('Error creating admin user:', error);\n    throw error;\n  }\n};\n\n// Instructions to create first admin:\n// 1. Open browser console on the login page\n// 2. Run: window.createFirstAdmin('admin@company.com', 'password123', 'Admin User')\n// 3. Replace with your desired admin credentials\n\n// Make it available globally for console access\nif (typeof window !== 'undefined') {\n  window.createFirstAdmin = createFirstAdmin;\n}","size_bytes":1269},"src/pages/admin/AddEmployee.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { auth, db } from '../../firebase';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc, serverTimestamp } from 'firebase/firestore';\nimport Layout from '../../components/Layout';\n\nexport default function AddEmployee() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    employeeId: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      // Create user account\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        formData.email,\n        formData.password\n      );\n\n      // Create user document in Firestore\n      await setDoc(doc(db, 'users', userCredential.user.uid), {\n        name: formData.name,\n        email: formData.email,\n        role: 'employee',\n        employeeId: formData.employeeId,\n        isActive: true,\n        createdAt: serverTimestamp()\n      });\n\n      alert('Employee added successfully!');\n      navigate('/admin/manage-employees');\n    } catch (error) {\n      console.error('Error adding employee:', error);\n      if (error.code === 'auth/email-already-in-use') {\n        setError('An account with this email already exists');\n      } else if (error.code === 'auth/weak-password') {\n        setError('Password is too weak');\n      } else if (error.code === 'auth/invalid-email') {\n        setError('Invalid email address');\n      } else {\n        setError('Failed to add employee: ' + error.message);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Add New Employee</h1>\n\n        {error && (\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n            {error}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n              Full Name\n            </label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={formData.name}\n              onChange={handleChange}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"employeeId\" className=\"block text-sm font-medium text-gray-700\">\n              Employee ID\n            </label>\n            <input\n              id=\"employeeId\"\n              name=\"employeeId\"\n              type=\"text\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={formData.employeeId}\n              onChange={handleChange}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n              Email Address\n            </label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={formData.email}\n              onChange={handleChange}\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n              Password\n            </label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              required\n              className=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={formData.password}\n              onChange={handleChange}\n            />\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50\"\n          >\n            {loading ? 'Adding Employee...' : 'Add Employee'}\n          </button>\n        </form>\n      </div>\n    </Layout>\n  );\n}","size_bytes":5016},"src/pages/admin/AttendanceRecords.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { collection, getDocs, query, orderBy } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport Layout from '../../components/Layout';\n\nexport default function AttendanceRecords() {\n  const [records, setRecords] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [filter, setFilter] = useState({\n    date: '',\n    employeeId: ''\n  });\n\n  useEffect(() => {\n    fetchAttendanceRecords();\n  }, []);\n\n  const fetchAttendanceRecords = async () => {\n    try {\n      const attendanceQuery = query(\n        collection(db, 'attendance'),\n        orderBy('date', 'desc')\n      );\n      const snapshot = await getDocs(attendanceQuery);\n      const attendanceList = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setRecords(attendanceList);\n    } catch (error) {\n      console.error('Error fetching attendance records:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredRecords = records.filter(record => {\n    if (filter.date && record.date !== filter.date) return false;\n    if (filter.employeeId && !record.employeeId.toLowerCase().includes(filter.employeeId.toLowerCase())) return false;\n    return true;\n  });\n\n  const exportToCSV = () => {\n    const headers = ['Date', 'Employee ID', 'Employee Name', 'Clock In', 'Clock Out', 'Hours Worked'];\n    const csvContent = [\n      headers.join(','),\n      ...filteredRecords.map(record => [\n        record.date,\n        record.employeeId,\n        record.employeeName,\n        record.clockIn,\n        record.clockOut || 'N/A',\n        record.hoursWorked || 'N/A'\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `attendance-records-${new Date().toISOString().split('T')[0]}.csv`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <Layout>\n        <div className=\"text-center\">Loading...</div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"Attendance Records\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Attendance Records</h1>\n          <button\n            onClick={exportToCSV}\n            className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md\"\n          >\n            Export CSV\n          </button>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Filter by Date\n              </label>\n              <input\n                type=\"date\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                value={filter.date}\n                onChange={(e) => setFilter({...filter, date: e.target.value})}\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Filter by Employee ID\n              </label>\n              <input\n                type=\"text\"\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                placeholder=\"Search by Employee ID\"\n                value={filter.employeeId}\n                onChange={(e) => setFilter({...filter, employeeId: e.target.value})}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Records Table */}\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Employee\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Clock In\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Clock Out\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Hours Worked\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {filteredRecords.map((record) => (\n                <tr key={record.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.date}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {record.employeeName}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {record.employeeId}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.clockIn}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.clockOut || (\n                      <span className=\"text-orange-600\">Not clocked out</span>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {record.hoursWorked || 'N/A'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          \n          {filteredRecords.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No attendance records found\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":6299},"src/pages/admin/ManageEmployees.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { collection, getDocs, query, where, doc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport Layout from '../../components/Layout';\n\nexport default function ManageEmployees() {\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const fetchEmployees = async () => {\n    try {\n      const employeesQuery = query(\n        collection(db, 'users'),\n        where('role', '==', 'employee')\n      );\n      const snapshot = await getDocs(employeesQuery);\n      const employeeList = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setEmployees(employeeList);\n    } catch (error) {\n      console.error('Error fetching employees:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleEmployeeStatus = async (employeeId, currentStatus) => {\n    try {\n      await updateDoc(doc(db, 'users', employeeId), {\n        isActive: !currentStatus\n      });\n      fetchEmployees();\n    } catch (error) {\n      console.error('Error updating employee status:', error);\n      alert('Error updating employee status');\n    }\n  };\n\n  const deleteEmployee = async (employeeId, employeeName) => {\n    if (window.confirm(`Are you sure you want to delete ${employeeName}?`)) {\n      try {\n        await deleteDoc(doc(db, 'users', employeeId));\n        fetchEmployees();\n        alert('Employee deleted successfully');\n      } catch (error) {\n        console.error('Error deleting employee:', error);\n        alert('Error deleting employee');\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <Layout>\n        <div className=\"text-center\">Loading...</div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"Manage Employees\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Manage Employees</h1>\n        </div>\n\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Employee\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Employee ID\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Email\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {employees.map((employee) => (\n                <tr key={employee.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {employee.name}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-500\">\n                      {employee.employeeId}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-500\">\n                      {employee.email}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      employee.isActive \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-red-100 text-red-800'\n                    }`}>\n                      {employee.isActive ? 'Active' : 'Inactive'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                    <button\n                      onClick={() => toggleEmployeeStatus(employee.id, employee.isActive)}\n                      className={`${\n                        employee.isActive \n                          ? 'text-red-600 hover:text-red-900' \n                          : 'text-green-600 hover:text-green-900'\n                      }`}\n                    >\n                      {employee.isActive ? 'Deactivate' : 'Activate'}\n                    </button>\n                    <button\n                      onClick={() => deleteEmployee(employee.id, employee.name)}\n                      className=\"text-red-600 hover:text-red-900\"\n                    >\n                      Delete\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          \n          {employees.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No employees found\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":5518},"src/pages/admin/OfficeLocation.jsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { collection, doc, setDoc, getDocs } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport Layout from '../../components/Layout';\n\nexport default function OfficeLocation() {\n  const [location, setLocation] = useState({\n    latitude: '',\n    longitude: '',\n    radius: 100\n  });\n  const [loading, setLoading] = useState(false);\n  const [currentLocation, setCurrentLocation] = useState(null);\n\n  useEffect(() => {\n    fetchOfficeLocation();\n  }, []);\n\n  const fetchOfficeLocation = async () => {\n    try {\n      const settingsSnapshot = await getDocs(collection(db, 'settings'));\n      if (!settingsSnapshot.empty) {\n        const settings = settingsSnapshot.docs[0].data();\n        setLocation({\n          latitude: settings.latitude || '',\n          longitude: settings.longitude || '',\n          radius: settings.radius || 100\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching office location:', error);\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by this browser');\n      return;\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setCurrentLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n        setLocation({\n          ...location,\n          latitude: position.coords.latitude.toString(),\n          longitude: position.coords.longitude.toString()\n        });\n      },\n      (error) => {\n        alert('Error getting location: ' + error.message);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      }\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const settingsData = {\n        latitude: parseFloat(location.latitude),\n        longitude: parseFloat(location.longitude),\n        radius: parseInt(location.radius),\n        updatedAt: new Date()\n      };\n\n      await setDoc(doc(db, 'settings', 'office'), settingsData);\n      alert('Office location updated successfully!');\n    } catch (error) {\n      console.error('Error updating office location:', error);\n      alert('Error updating office location: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout title=\"Office Location Settings\">\n      <div className=\"max-w-2xl mx-auto bg-white rounded-lg shadow p-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-6\">Office Location Settings</h1>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Office Coordinates\n            </label>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-xs text-gray-500 mb-1\">Latitude</label>\n                <input\n                  type=\"number\"\n                  step=\"any\"\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                  value={location.latitude}\n                  onChange={(e) => setLocation({...location, latitude: e.target.value})}\n                  placeholder=\"e.g., 40.7128\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs text-gray-500 mb-1\">Longitude</label>\n                <input\n                  type=\"number\"\n                  step=\"any\"\n                  required\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n                  value={location.longitude}\n                  onChange={(e) => setLocation({...location, longitude: e.target.value})}\n                  placeholder=\"e.g., -74.0060\"\n                />\n              </div>\n            </div>\n            \n            <button\n              type=\"button\"\n              onClick={getCurrentLocation}\n              className=\"mt-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md text-sm\"\n            >\n              Use Current Location\n            </button>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Allowed Radius (meters)\n            </label>\n            <input\n              type=\"number\"\n              min=\"1\"\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"\n              value={location.radius}\n              onChange={(e) => setLocation({...location, radius: e.target.value})}\n              placeholder=\"100\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Employees must be within this radius to clock in/out\n            </p>\n          </div>\n\n          {currentLocation && (\n            <div className=\"p-4 bg-green-50 border border-green-200 rounded-md\">\n              <p className=\"text-green-800 font-medium\">Current Location Detected:</p>\n              <p className=\"text-green-700 text-sm\">\n                Lat: {currentLocation.latitude.toFixed(6)}, \n                Lng: {currentLocation.longitude.toFixed(6)}\n              </p>\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={loading}\n            className=\"w-full bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-400 text-white px-4 py-2 rounded-md font-medium\"\n          >\n            {loading ? 'Updating...' : 'Update Office Location'}\n          </button>\n        </form>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":5839},"src/pages/admin/Reports.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\nimport { db } from '../../firebase';\nimport Layout from '../../components/Layout';\n\nexport default function Reports() {\n  const [reportData, setReportData] = useState({\n    totalEmployees: 0,\n    monthlyAttendance: [],\n    employeeStats: []\n  });\n  const [loading, setLoading] = useState(true);\n  const [selectedMonth, setSelectedMonth] = useState(new Date().toISOString().substr(0, 7));\n\n  useEffect(() => {\n    generateReports();\n  }, [selectedMonth]);\n\n  const generateReports = async () => {\n    try {\n      // Get all employees\n      const employeesQuery = query(\n        collection(db, 'users'),\n        where('role', '==', 'employee'),\n        where('isActive', '==', true)\n      );\n      const employeesSnapshot = await getDocs(employeesQuery);\n      const employees = employeesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n\n      // Get attendance for selected month\n      const attendanceSnapshot = await getDocs(collection(db, 'attendance'));\n      const allAttendance = attendanceSnapshot.docs.map(doc => doc.data());\n\n      const monthAttendance = allAttendance.filter(record => \n        record.date.startsWith(selectedMonth)\n      );\n\n      // Calculate employee stats\n      const employeeStats = employees.map(employee => {\n        const employeeAttendance = monthAttendance.filter(record => \n          record.employeeId === employee.employeeId\n        );\n\n        const totalDays = employeeAttendance.length;\n        const totalHours = employeeAttendance.reduce((sum, record) => {\n          return sum + (parseFloat(record.hoursWorked) || 0);\n        }, 0);\n\n        return {\n          ...employee,\n          totalDays,\n          totalHours: totalHours.toFixed(2),\n          averageHours: totalDays > 0 ? (totalHours / totalDays).toFixed(2) : '0.00'\n        };\n      });\n\n      setReportData({\n        totalEmployees: employees.length,\n        monthlyAttendance: monthAttendance,\n        employeeStats\n      });\n    } catch (error) {\n      console.error('Error generating reports:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const exportReport = () => {\n    const headers = ['Employee ID', 'Name', 'Total Days', 'Total Hours', 'Average Hours/Day'];\n    const csvContent = [\n      headers.join(','),\n      ...reportData.employeeStats.map(emp => [\n        emp.employeeId,\n        emp.name,\n        emp.totalDays,\n        emp.totalHours,\n        emp.averageHours\n      ].join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `monthly-report-${selectedMonth}.csv`;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (loading) {\n    return (\n      <Layout>\n        <div className=\"text-center\">Loading...</div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout title=\"Reports\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">Monthly Reports</h1>\n          <button\n            onClick={exportReport}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md\"\n          >\n            Export Report\n          </button>\n        </div>\n\n        {/* Month Selector */}\n        <div className=\"bg-white p-4 rounded-lg shadow\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Select Month\n          </label>\n          <input\n            type=\"month\"\n            className=\"px-3 py-2 border border-gray-300 rounded-md\"\n            value={selectedMonth}\n            onChange={(e) => setSelectedMonth(e.target.value)}\n          />\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Total Employees</h3>\n            <p className=\"text-3xl font-bold text-blue-600\">{reportData.totalEmployees}</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Total Attendance Days</h3>\n            <p className=\"text-3xl font-bold text-green-600\">{reportData.monthlyAttendance.length}</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Average Daily Attendance</h3>\n            <p className=\"text-3xl font-bold text-purple-600\">\n              {reportData.totalEmployees > 0 \n                ? Math.round(reportData.monthlyAttendance.length / reportData.totalEmployees)\n                : 0}\n            </p>\n          </div>\n        </div>\n\n        {/* Employee Statistics */}\n        <div className=\"bg-white shadow rounded-lg overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Employee Statistics</h2>\n          </div>\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Employee\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Days Worked\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Total Hours\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Avg Hours/Day\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {reportData.employeeStats.map((employee) => (\n                <tr key={employee.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {employee.name}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {employee.employeeId}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {employee.totalDays}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {employee.totalHours}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {employee.averageHours}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n\n          {reportData.employeeStats.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              No employee data found for selected month\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":7299},"replit.md":{"content":"# Employee Attendance System\n\n## Overview\nThis is a React-based Employee Attendance System with Firebase authentication and Firestore database integration. The application allows employees to clock in/out and provides admin functionality for managing employees, office locations, and viewing attendance reports.\n\n## Project Architecture\n- **Frontend**: React with Vite as the build tool\n- **Styling**: Tailwind CSS with forms plugin\n- **Authentication**: Firebase Auth with Google sign-in\n- **Database**: Firebase Firestore\n- **Routing**: React Router DOM v7\n\n## Recent Changes (September 25, 2025)\n- Successfully imported project from GitHub\n- Installed all dependencies (npm install)\n- Configured Vite for Replit environment with `allowedHosts: true`\n- Set up workflow on port 5000 with proper host configuration (0.0.0.0)\n- Configured deployment settings for production using autoscale with serve\n- Firebase integration is configured but secrets need to be set up\n\n## Current Status\n- ✅ Development server running on port 5000\n- ✅ Dependencies installed and configured\n- ✅ Vite configuration optimized for Replit\n- ✅ Deployment configuration set up\n- ⚠️ Firebase secrets need to be configured for authentication to work\n\n## Firebase Setup Required\nThe application uses Firebase for authentication and database. To complete the setup:\n\n1. Go to the Firebase console and create a project\n2. Enable Authentication with Google sign-in\n3. Add authorized domains for your Replit app\n4. Get the project configuration values and set these secrets:\n   - VITE_FIREBASE_PROJECT_ID\n   - VITE_FIREBASE_APP_ID\n   - VITE_FIREBASE_API_KEY\n\n## Key Features\n- Employee clock in/out system\n- Admin dashboard for employee management\n- Office location management\n- Attendance reports and records\n- Role-based access control (admin/employee)\n- Responsive design with Tailwind CSS\n\n## Development\n- Run `npm run dev` to start the development server\n- Run `npm run build` to build for production\n- The app is configured to work with Replit's proxy system","size_bytes":2045}},"version":1}